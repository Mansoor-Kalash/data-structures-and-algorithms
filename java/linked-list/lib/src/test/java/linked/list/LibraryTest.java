/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package linked.list;

import org.junit.Test;
import static org.junit.Assert.*;

public class LibraryTest {
    @Test public void someLibraryMethodReturnsTrue() {
        Library classUnderTest = new Library();
//        assertTrue("someLibraryMethod should return 'true'", classUnderTest.someLibraryMethod());
    }
  @Test public void SinglyLinkedListTest(){
    LinkedList<Integer> singly = new LinkedList<>();
    String empty = "{ null }";
    assertEquals("Can successfully instantiate an empty linked list",empty,singly.toString());
    singly.add(5);
    assertTrue("Can properly insert into the linked list",singly.include(5));
    singly.add(6);
  assertEquals("The head property will properly point to the first node in the linked list",6,singly.head.value);
  singly.add(7);
    assertEquals("Can properly insert multiple nodes into the linked list","{ 7 } ->{ 6 } ->{ 5 } ->{ null }"
    ,singly.toString());
    assertTrue("Will return true when finding a value within the linked list that exists",singly.include(6));
assertFalse("Will return false when searching for a value in the linked list that does not exist",singly.include(8));
assertEquals("Can properly return a collection of all the values that exist in the linked list","{ 7 } ->{ 6 } ->{ 5 } ->{ null }",singly.toString());
singly.Append(3);

assertEquals("Can successfully add a node to the end of the linked list","{ 7 } ->{ 6 } ->{ 5 } ->{ 3 } ->{ null }",singly.toString());
    singly.Append(46);
    singly.Append(55);
assertEquals("Can successfully add multiple nodes to the end of a linked list","{ 7 } ->{ 6 } ->{ 5 } ->{ 3 } ->{ 46 } ->{ 55 } ->{ null }",singly.toString());
singly.addBefore(3,100);
//"{ 7 } ->{ 6 } ->{ 5 } ->{ 100 } ->{ 3 } ->{ 46 } ->{ 55 } ->{ null }"

assertEquals("Can successfully insert a node before a node located i the middle of a linked list","{ 7 } ->{ 6 } ->{ 5 } ->{ 100 } ->{ 3 } ->{ 46 } ->{ 55 } ->{ null }",singly.toString());
singly.addBefore(7,1);
assertEquals("Can successfully insert a node before the first node of a linked list","{ 1 } ->{ 7 } ->{ 6 } ->{ 5 } ->{ 100 } ->{ 3 } ->{ 46 } ->{ 55 } ->{ null }",singly.toString()
);
singly.addAfter(100,21);

assertEquals("Can successfully insert after a node in the middle of the linked list","{ 1 } ->{ 7 } ->{ 6 } ->{ 5 } ->{ 100 } ->{ 21 } ->{ 3 } ->{ 46 } ->{ 55 } ->{ null }",singly.toString());
singly.addAfter(55,11);
assertEquals("Can successfully insert a node after the last node of the linked list","{ 1 } ->{ 7 } ->{ 6 } ->{ 5 } ->{ 100 } ->{ 21 } ->{ 3 } ->{ 46 } ->{ 55 } ->{ 11 } ->{ null }",singly.toString()
);
assertEquals("Where k is greater than the length of the linked list",404,singly.kthFromEnd(20));
assertEquals("Where k and the length of the list are the same",404,singly.kthFromEnd(singly.size));
assertEquals("Where k is not a positive integer",404,singly.kthFromEnd(-2));


LinkedList<Integer> size1 = new LinkedList<>();
size1.add(1);
assertEquals("Where the linked list is of a size 1",1,size1.kthFromEnd(0));

assertEquals("where k is not at the end, but somewhere in the middle of the linked list",3,singly.kthFromEnd(3));
  }
}
