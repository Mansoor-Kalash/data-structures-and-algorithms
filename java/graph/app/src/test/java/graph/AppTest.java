/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package graph;

import org.junit.Test;

import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

import static org.junit.Assert.*;

public class AppTest {
    @Test public void appHasAGreeting() {
        App classUnderTest = new App();
//        assertNotNull("app should have a greeting", classUnderTest.getGreeting());
    }
  @Test public void testGraph() {


    //        Node can be successfully added to the graph

    Graph<String> graph = new Graph<>();
    Node<String> first = graph.addNode("mansoor");


    assertTrue(graph.graph.containsKey(first));


    //        An edge can be successfully added to the graph
    Node<String> mid = graph.addNode("jow");
    graph.addEdge(first, mid, false);

    assertEquals(mid, graph.getNeighbors(first).get(0));


    //        A collection of all nodes can be properly retrieved from the graph

    Set<Node<String>> test1 = new HashSet<>();
    test1.add(first);
    test1.add(mid);

    assertEquals(test1, graph.getNodes());


    //        All appropriate neighbors can be retrieved from the graph

    List<Node<String>> test2 = new ArrayList<>();
    test2.add(mid);

    assertEquals(test2, graph.getNeighbors(first));

    //        Neighbors are returned with the weight between nodes included

    //        The proper size is returned, representing the number of nodes in the graph

    assertEquals(2, graph.getSize());


    //        A graph with only one node and edge can be properly returned
    Graph<String> oneNodeGraph = new Graph<>();
    Node<String> newNode = oneNodeGraph.addNode("kalash");

    Set<Node<String>> test3 = new HashSet<>();
    test3.add(newNode);

    assertEquals(test3, oneNodeGraph.getNodes());


    //        An empty graph properly returns null
    Graph<String> empty = new Graph<>();

    assertNull(empty.getNodes());


    Graph<String> graph2 = new Graph<>();


    Node<String> a = graph2.addNode("M");
    Node<String> b =  graph2.addNode("A");
    Node<String> c = graph2.addNode("L");
    Node<String> d = graph2.addNode("I");
    Node<String> e = graph2.addNode("K");

    graph2.addEdge(a,b,true);
    graph2.addEdge(b,c,true);
    graph2.addEdge(c,d,true);
    graph2.addEdge(d,e,true);
    graph2.addEdge(e,e,true);


    List<Node<String>> result = new ArrayList<>();
    result.add(a);
    result.add(b);
    result.add(c);
    result.add(d);
    result.add(e);


    assertEquals(result,graph2.breadthFirst(a));
  }

  @Test
  public void breadthFirstTest(){

    Graph<String> graph2 = new Graph<>();


    Node<String> a = graph2.addNode("cat");
    Node<String> b =  graph2.addNode("camel");
    Node<String> c = graph2.addNode("dog");
    Node<String> d = graph2.addNode("lion");
    Node<String> e = graph2.addNode("tiger");

    graph2.addEdge(a,b,true);
    graph2.addEdge(b,c,true);
    graph2.addEdge(c,d,true);
    graph2.addEdge(d,e,true);
    graph2.addEdge(e,e,true);


    List<Node<String>> result = new ArrayList<>();
    result.add(a);
    result.add(b);
    result.add(c);
    result.add(d);
    result.add(e);


    assertEquals(result,graph2.breadthFirst(a));
}

  @Test(expected = NullPointerException.class)
  public void test_emptyDFS(){
    Graph graph = new Graph();
    graph.breadthFirst(null);
  }
}
