/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package stack.and.queue;

import org.junit.Test;
import static org.junit.Assert.*;

public class LibraryTest {
    @Test public void someLibraryMethodReturnsTrue() {
        Library classUnderTest = new Library();
//        assertTrue("someLibraryMethod should return 'true'", classUnderTest.someLibraryMethod());
    }
    @Test public void testStack(){
      Stack<Integer> stack = new Stack<>();
      stack.push(1);
      assertEquals("Can successfully push onto a stack","1",stack.peak());
      stack.push(2);
      assertEquals("Can successfully push onto a stack","2",stack.peak());
      stack.pop();
      assertEquals("Can successfully pop off the stack","1",stack.peak());
      stack.pop();
      assertEquals("Can successfully empty a stack after multiple pops",true,stack.isEmpty());
      stack.push(1);
      assertEquals("Can successfully peek the next item on the stack","1",stack.peak());
      Stack<Integer> emptyStack = new Stack<>();
      assertEquals("Can successfully instantiate an empty stack",true,emptyStack.isEmpty());
      assertEquals("Calling pop or peek on empty stack raises exception","the stack is empty",emptyStack.peak());


    }
    @Test public void testQueue (){
      Queue<Integer> queue = new Queue<>();
      queue.enqueue(1);
      assertEquals("Can successfully enqueue into a queue","1",queue.peak());
      queue.enqueue(2);
      queue.dequeue();
      assertEquals("Can successfully enqueue into a queue","2",queue.peak());
      queue.enqueue(3);
      queue.enqueue(4);
      queue.dequeue();
      queue.dequeue();
      assertEquals("Can successfully enqueue into a queue","4",queue.peak());
      queue.enqueue(5);
      queue.dequeue();
      assertEquals("Can successfully dequeue out of a queue the expected value","5",queue.peak());
      assertEquals("Can successfully peek into a queue, seeing the expected value","5",queue.peak());
      queue.enqueue(6);

      queue.dequeue();
      queue.dequeue();
      assertEquals("Can successfully empty a queue after multiple dequeues",true,queue.isEmpty());
      Queue<Integer> emptyQueue = new Queue<>();
      assertEquals("Can successfully instantiate an empty queue",true,emptyQueue.isEmpty());
      assertEquals("Calling dequeue or peek on empty queue raises exception","the queue is empty",emptyQueue.dequeue());











    }
}
